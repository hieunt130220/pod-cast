"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssemblyClient = void 0;
const axios_1 = __importDefault(require("axios"));
const poll_func_1 = require("poll-func");
const types_1 = require("./types");
/**
 * The AssemblyAI client that allows you to call the AssemblyAI V2 endpoints via various functions.
 */
class AssemblyClient {
    /**
     * Creates an instance of AssemblyClient.
     * @param apiKey - Your API key to authenticate to AssemblyAI.
     *
     * @returns a new {@link AssemblyClient}.
     */
    constructor(apiKey) {
        /**
         * Upload an audio file to AssemblyAI for transcription.
         * The transcript can then be downloaded via {@link getTranscript}, {@link pollForTranscript}, {@link getTranscriptSentences}, {@link getTranscriptParagraphs}, and {@link getAllTranscripts}.
         *
         * @param audioUrl - A URL that points to your audio file, accessible only by AssemblyAI's servers.
         *
         * @returns An {@link UploadRequestResponse} with the audio_url used.
         */
        this.upload = (audioUrl) => __awaiter(this, void 0, void 0, function* () {
            const request = { upload_url: audioUrl };
            const response = yield this.httpClient.post('/upload', request, {
                headers: { 'transfer-encoding': 'chunked' },
            });
            return response.data;
        });
        /**
         * Create a transcript.
         * The transcript can then be downloaded via {@link getTranscript}, {@link pollForTranscript}, {@link getTranscriptSentences}, {@link getTranscriptParagraphs}, and {@link getAllTranscripts}.
         *
         * @param request - A {@link TranscriptRequest} with your transcription options.
         *
         * @returns A {@link TranscriptResponse} of an incomplete transcript.
         */
        this.createTranscript = (request) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.httpClient.post('/transcript', request);
            return response.data;
        });
        /**
         * Get the detailed information of a specific transcript by id.
         *
         * @param transcriptId - The unique identifier of your transcription.
         *
         * @returns A {@link TranscriptResponse} of the full transcript object no matter it's status.
         */
        this.getTranscript = (transcriptId) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.httpClient.get(`/transcript/${transcriptId}`);
            return response.data;
        });
        /**
         * Poll for a transcript.
         *
         * @param transcriptId - The unique identifier of your transcription.
         * @param pollTimeout - The amount of time to poll for before timing out.
         * @param pollInterval - The amount of time in ms to wait between each call to see if the transcript is complete.
         *
         * @returns A {@link TranscriptResponse} when the transcript {@link TranscriptResponse.status} === `completed`.
         */
        this.pollForTranscript = (transcriptId, pollTimeout = 10 * 60 * 1000, pollInterval = 5 * 1000) => __awaiter(this, void 0, void 0, function* () {
            return (0, poll_func_1.asyncPoll)(() => __awaiter(this, void 0, void 0, function* () {
                const response = yield this.httpClient.get(`/transcript/${transcriptId}`);
                return response.data;
            }), (data) => data.status === 'completed', pollInterval, pollTimeout);
        });
        /**
         * Query for just the sentences of a transcript.
         *
         * @param transcriptId - The unique identifier of your transcription.
         *
         * @returns A {@link PartialTranscriptResponse} with the sentences of the transcript as a list of [utterances]{@link Utterance}.
         */
        this.getTranscriptSentences = (transcriptId) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.httpClient.get(`/transcript/${transcriptId}/sentences`);
            return response.data;
        });
        /**
         * Query for just the paragraphs of a transcript.
         *
         * @param transcriptId - The unique identifier of your transcription.
         *
         * @returns A {@link PartialTranscriptResponse} with the paragraphs of the transcript as a list of [utterances]{@link Utterance}.
         */
        this.getTranscriptParagraphs = (transcriptId) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.httpClient.get(`/transcript/${transcriptId}/paragraphs`);
            return response.data;
        });
        /**
         * List all your transcripts.
         *
         * @param limit - Max results to return in a single response, between `1` and `200` inclusive.
         * @param status - Filter by transcript status, `"processing"`, `"queued"`, `"completed"`, or `"error"`.
         * @param createdOn - Only return transcripts created on this date; format: `"YYYY-MM-DD"`.
         * @param beforeId - Return transcripts that were created before this transcript id.
         * @param afterId - Return transcripts that were created after this transcript id.
         * @param throttledOnly - Only return throttled transcripts, overrides status filter.
         *
         * @returns A paginated {@link AllTranscriptsResponse} with {@link limit} transcript results.
         */
        this.getAllTranscripts = (limit = 10, status = '', createdOn = '', beforeId = '', afterId = '', throttledOnly = false) => __awaiter(this, void 0, void 0, function* () {
            let requestUtl = `/transcript?limit=${limit}&throttled_only=${String(throttledOnly)}`;
            if (status !== '') {
                requestUtl += `&status=${status}`;
            }
            if (createdOn !== '') {
                requestUtl += `&created_on=${createdOn}`;
            }
            if (beforeId !== '') {
                requestUtl += `&before_id=${beforeId}`;
            }
            if (afterId !== '') {
                requestUtl += `&after_id=${afterId}`;
            }
            const response = yield this.httpClient.get(requestUtl);
            const responseData = response.data;
            return new types_1.AllTranscriptsResponse(this.httpClient, responseData);
        });
        /**
         * Permanently delete a transcript by id. The record of the transcript will exist and remain queryable, however, all fields containing sensitive data (like text transcriptions) will be permanently deleted.
         *
         * @param transcriptId - The unique identifier of your transcription.
         */
        this.deleteTranscript = (transcriptId) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.httpClient.delete(`/transcript/${transcriptId}`);
            return response.data;
        });
        /**
         * If you're working with short bursts of audio, less than 15 seconds, you can send the audio data directly to the `/v2/stream` endpoint which will return a transcript to you within a few hundred milliseconds, directly in the request-response loop.
         *
         * ## Audio Requirements
         *
         * The audio data you send to this endpoint has to comply with a strict format. This is because we don't do any transcoding to your data, we send it directly to the model for transcription. You can send the content of a `.wav` file to this endpoint, or raw data read directly from a microphone. Either way, you must record your audio in the following format to use this endpoint:
         *
         * *   16-bit Signed Integer PCM encoding (ie, a .wav file)
         * *   8khz sampling rate
         * *   128kbps bitrate
         * *   16-bit Precision
         * *   Single channel
         * *   Headless (ie, strip any headers from wav files)
         * *   15 seconds or less of audio per request
         *
         * @param request - A {@link StreamRequest}
         *
         * @returns A {@link StreamResponse}. Depending on how much audio data you send, the API will respond within 100-750 milliseconds.
         */
        this.stream = (request) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.httpClient.post('/stream', request);
            return response.data;
        });
        this.httpClient = axios_1.default.create({
            baseURL: 'https://api.assemblyai.com/v2',
            headers: {
                authorization: apiKey,
                'content-type': 'application/json',
            },
        });
    }
}
exports.AssemblyClient = AssemblyClient;
