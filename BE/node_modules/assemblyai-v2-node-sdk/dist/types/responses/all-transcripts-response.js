"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllTranscriptsResponse = void 0;
/**
 * A paginated list of all your transcripts.
 */
class AllTranscriptsResponse {
    /**
     * Creates an instance of AllTranscriptsResponse.
     * @param authenticatedHttpClient - The authenticated http client used to make the request
     * @param data - The data returned from the initial request
     */
    constructor(authenticatedHttpClient, data) {
        /**
         * Get the next page of transcript results.
         * @returns A promise that resolves an {@link AllTranscriptsResponse}
         */
        this.nextPage = () => __awaiter(this, void 0, void 0, function* () {
            if (this.page_details === undefined ||
                this.page_details.next_url === undefined) {
                throw new Error('You cannot get the next page.');
            }
            const pageDetails = this.page_details;
            const response = yield this.httpClient.get(pageDetails.next_url);
            return response.data;
        });
        /**
         * Get the previous page of transcript results.
         * @returns A promise that resolves an {@link AllTranscriptsResponse}
         */
        this.prevPage = () => __awaiter(this, void 0, void 0, function* () {
            if (this.page_details === undefined ||
                this.page_details.prev_url === undefined) {
                throw new Error('You cannot get the prev page.');
            }
            const pageDetails = this.page_details;
            const response = yield this.httpClient.get(pageDetails.prev_url);
            return response.data;
        });
        this.httpClient = authenticatedHttpClient;
        this.page_details = data.page_details;
        this.transcripts = data.transcripts;
    }
}
exports.AllTranscriptsResponse = AllTranscriptsResponse;
